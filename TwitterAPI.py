# -*- coding: utf-8 -*-
"""TwitterAPI_beta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XzbtVOjqWBSfh--DkaBAw96AlDLVqF9Y
"""

import tweepy as tw
import pandas as pd
import numpy as np
import json
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator

# Sets Keys
consumer_key = 'xxx'
consumer_secret = 'xxx'
access_token = 'xxx'
access_token_secret = 'xxx'

auth = tw.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tw.API(auth)
public_tweets = api.home_timeline()

# Sets topic trending region
BRAZIL_WOE_ID = 23424768
 
brazil_trends = api.trends_place(BRAZIL_WOE_ID) 
trends = json.loads(json.dumps(brazil_trends, indent=1))

# Sets df caolumns
df = pd.DataFrame(columns=['trend', 'tweet_volume'])

frequency_dict = {}

for fields in trends[0]["trends"]:
  if fields['tweet_volume'] is not None:
    trend = fields['name']
    tweet_volume = fields['tweet_volume']

    frequency_dict[trend] = int(tweet_volume)
    df =df.append({'trend':trend, 'tweet_volume':tweet_volume}, ignore_index=True)



# Plots in WordCloud chart the most relevant top trending
wordcloud = WordCloud(width = 1000, height = 500, background_color ='white',).generate_from_frequencies(frequency_dict)

plt.figure(figsize=(15,8))
plt.axis("off")
plt.imshow(wordcloud)

# Define the top 1 topic
top1 = list(frequency_dict.keys())[0]

# Sets cursor search
search ='Polônia' + '-filter:retweets'
cursor_tweets = tw.Cursor(api.search,
                   q= search).items(20)

# Checks tweets
for tweet in cursor_tweets:
  print(tweet.created_at)
  print(tweet.text)

# Return tweets in _json attribute
twkey = tweet._json.keys()

# Creates a dict bases on the twkeys keys with an empty list for each key
tweets_dict = {key: [] for key in twkey}

tweets_dict

# Appends values according to each key

for tweet in cursor_tweets:
  for key in tweets_dict.keys():
    try:
      twkey = tweet._json[key]
      tweets_dict[key].append(twkey)
    except KeyError:
      twkey = ""
      tweets_dict[key].appned("")
    except:
      tweets_dict[key] = [twkey]
    print("tweets_dict[key]: {}  - tweet[key]: {}".format(tweets_dict[key], twkey))

# Creates DF with top1 topic tweets
dfTweets = pd.DataFrame().from_dict(tweets_dict)

stopwords = set(STOPWORDS)
stopwords.update(["da", "meu", "em", "você", "de", "ao", "os", "eu", "essa", "text", "dtype", "https", "\\", "\\n", "https://", "nhttps", "object", 'jXZ5iyAC3T', "Length", "name"])

# Plots in WordCloud chart the most frequent words in top1 topic twwets

wp = WordCloud(width = 1000, height = 500, collocations=False, background_color ='white', stopwords=stopwords).generate(str(dfTweets.text))
plt.figure(figsize=(15,8))
plt.axis("off")
plt.imshow(wp)